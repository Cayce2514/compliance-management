-content_for :widget_title do
  Regulations and Controls

.tabbable
  %ul.nav.nav-tabs
    %li=link_to 'Regulations', '#regulations', :data => { :toggle => 'tab' }
    %li=link_to 'Controls', '#controls', :data => { :toggle => 'tab' }
  .tab-content
    #regulations.tab-pane
      -sections = program.sections.includes(:controls => :implementing_controls)
      %ul.slugtree
        =walk_slug_tree(Program.slugtree(sections)) do |item, step|
          .row-fluid
            .span12
              .regulationslot.toggle.span9.collapsed{ :'data-toggle' => 'collapse', :'data-target' => "#content_#{item.id}" }
                %span.prefix=item.slug
                =item.title || item.description
                -if !item.description.blank?
                  .expander
              .attached.span3
                -controls = item.linked_controls
                -if !controls.empty?
                  %ul.spannomargin{ :title => controls.map(&:slug).join(", ") }
                    %li #{controls.size}:
                    -controls.each do |control|
                      %li=control.slug
                -elsif item.na?
                  .controls
                    N/A
                -else
                  .controls
                    %strong 0
            .row-fluid-slotcontent
              .span9
                .collapse{ :id => "content_#{item.id}" }
                  =item.description

    #controls.tab-pane
      -controls = program.controls.includes(:implementing_controls)
      %ul.slugtree
        =walk_slug_tree(Program.slugtree(controls)) do |item, step|
          .row-fluid
            .span12
              .regulationslot.toggle.span9.collapsed{ :'data-toggle' => 'collapse', :'data-target' => "#content_#{item.id}" }
                %span.prefix=item.slug
                =item.title || item.description
                -if !item.description.blank?
                  .expander
              .attached.span3
                -controls = item.implementing_controls
                -if !controls.empty?
                  %ul.spannomargin{ :title => controls.map(&:slug).join(", ") }
                    %li #{controls.size}:
                    -controls.each do |control|
                      %li=control.slug
                -else
                  .controls
                    %strong 0
            .row-fluid-slotcontent
              .span9
                .collapse{ :id => "content_#{item.id}" }
                  =item.description
