diff --git a/lib/dm-rails/session_store.rb b/lib/dm-rails/session_store.rb
index 976671c..63defc3 100644
--- a/lib/dm-rails/session_store.rb
+++ b/lib/dm-rails/session_store.rb
@@ -13,8 +13,8 @@ module Rails
         include ::DataMapper::Resource
 
         property :id,         Serial
-        property :session_id, String,   :required => true, :unique => true
-        property :data,       Object,   :required => true
+        property :session_id, String,   :required => true, :unique => true, :length => 0..150
+        property :data,       Object,   :required => false
         property :updated_at, DateTime,                    :index => true
 
         def self.name
@@ -27,7 +27,9 @@ module Rails
 
       end
 
-      SESSION_RECORD_KEY = 'rack.session.record'.freeze
+      # for backward compatibility with Rails 3.0
+      ENV_SESSION_OPTIONS_KEY = ::Rack::Session::Abstract::ENV_SESSION_OPTIONS_KEY unless const_defined?("ENV_SESSION_OPTIONS_KEY")
+      SESSION_RECORD_KEY      = 'rack.session.record'.freeze
 
       class_attribute :session_class
       self.session_class = Session
@@ -41,8 +43,9 @@ module Rails
         [ sid, session.data ]
       end
 
-      def set_session(env, sid, session_data)
-        session            = get_session_resource(env, sid)
+      def set_session(env, sid, session_data, options = {})
+        session            = find_session(sid)
+        #session            = get_session_resource(env, sid)
         session.data       = session_data
         session.updated_at = DateTime.now if session.dirty?
         session.save ? sid : false
@@ -60,8 +63,13 @@ module Rails
         self.class.session_class.first_or_new(:session_id => sid)
       end
 
+      def destroy_session(env, sid = nil, options = {})
+        sid ||= current_session_id(env)
+        find_session(sid).destroy
+      end
+
       def destroy(env)
-        find_session(current_session_id(env)).destroy
+        destroy_session(env)
       end
 
     end
