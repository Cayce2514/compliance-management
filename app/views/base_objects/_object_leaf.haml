-# locals: instance, title_attr, description_attr

-code_attr = :slug if local_assigns[:code_attr].nil?
-title_attr = :title if local_assigns[:title_attr].nil?
-description_attr = :description if local_assigns[:description_attr].nil?
-notes_attr = :notes if local_assigns[:notes_attr].nil?

-code = instance.send(code_attr) if local_assigns[:code].nil?
-title = instance.send(title_attr) if local_assigns[:title].nil?
-description = instance.send(description_attr) if local_assigns[:description].nil?
-description_inline = sanitize(description, :tags => []) if local_assigns[:description_inline].nil?
-notes = instance.send(notes_attr) if local_assigns[:notes].nil? && instance[notes_attr].present?

-object_type = nil if local_assigns[:object_type].nil?
-object_icon = nil if local_assigns[:object_icon].nil?

.span8
  -if title.present? && (description.present? || notes.present?)
    -# Both title and description
    .oneline.expand-on-hover
      -if object_type.present?
        .grcobject{ :class => object_type }
          %i{ :class => object_icon }
      -elsif object_icon.present?
        %i{ :class => object_icon }
      %span.code
        =code
      -if notes.present?
        %i.grcicon-comment
      %span.title
        =title
        %i.description-inline=description_inline
    .description
      -if instance.has_attribute? notes_attr
        .note
          -if notes.present?
            .note-content
              %a.edit-notes{:href => 'javascript://'}
                %i.grcicon-edit
              .rtf
                =display_as_html(notes)
          -else
            %a.note-trigger{:href => 'javascript://'}
              %i.grcicon-add-black
              Abstract
      =display_as_html(description)
  -elsif title.present?
    -# Title only
    .oneline.expandable
      -if object_type.present?
        .grcobject{ :class => object_type }
          %i{ :class => object_icon }
      -elsif object_icon.present?
        %i{ :class => object_icon }
      %span.code
        =code
      %span.title
        =title
    .description.inhover.no-description
      -if instance.has_attribute? notes_attr
        .note
          %a.note-trigger{:href => 'javascript://'}
            %i.grcicon-add-black
            Abstract
      %i No description

  -elsif (description.present? || notes.present?)
    -# Description only
    .oneline.description-only.expand-on-hover
      -if object_type.present?
        .grcobject{ :class => object_type }
          %i{ :class => object_icon }
      -elsif object_icon.present?
        %i{ :class => object_icon }
      %span.code
        =code
      -if notes.present?
        %i.grcicon-comment
      %span.title
        %i.description-inline=description_inline
    .description.inhover
      =display_as_html(description) do
        %span.code
          =code
        %br
        %br
        -if instance.has_attribute? notes_attr
          .note
            -if notes.present?
              .note-content
                %a.edit-notes{:href => 'javascript://'}
                  %i.grcicon-edit
                .rtf
                  =display_as_html(notes)
            -else
              %a.note-trigger{:href => 'javascript://'}
                %i.grcicon-add-black
                Abstract

  -else
    -# Neither (shouldn't happen)
    .oneline
      -if object_type.present?
        .grcobject{ :class => object_type }
          %i{ :class => object_icon }
      -elsif object_icon.present?
        %i{ :class => object_icon }
      %span.title (No description)
.span1
  %a.view-more{:href => 'javascript://'}
    view
