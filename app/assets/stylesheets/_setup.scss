
// SASS variables

$linkColor : #43c2c7;
$textColor: #666666;

// helper variables (it seems it is duplicated, but it is good to keep semantically correct var names)

$darkGray: #666666;
$white: #ffffff;

// mixins

  // boxshadow
  @mixin box-shadow($shadow-1: default, $shadow-2: false, $shadow-3: false, $shadow-4: false, $shadow-5: false, $shadow-6: false, $shadow-7: false, $shadow-8: false, $shadow-9: false, $shadow-10: false) {
    @if $shadow-1 == default {
      $shadow-1: -compass-space-list(compact(if($default-box-shadow-inset, inset, false), $default-box-shadow-h-offset, $default-box-shadow-v-offset, $default-box-shadow-blur, $default-box-shadow-spread, $default-box-shadow-color)); }
    $shadow: compact($shadow-1, $shadow-2, $shadow-3, $shadow-4, $shadow-5, $shadow-6, $shadow-7, $shadow-8, $shadow-9, $shadow-10);
    @include experimental(box-shadow, $shadow, -moz, -webkit, not -o, not -ms, not -khtml, official); }

  // border radius  
  @mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {
    @if $vertical-radius {
      // Webkit doesn't understand the official shorthand syntax for specifying
      // a vertical radius unless so in case there's several we only take the first.
      @include experimental(border-radius, first-value-of($radius) first-value-of($vertical-radius), not -moz, -webkit, not -o, not -ms, not -khtml, not official);
      @include experimental("border-radius", $radius unquote("/") $vertical-radius, -moz, not -webkit, not -o, not -ms, -khtml, official); }
    @else {
      @include experimental(border-radius, $radius); } }

  // transition
  @mixin transition($transition-1: default, $transition-2: false, $transition-3: false, $transition-4: false, $transition-5: false, $transition-6: false, $transition-7: false, $transition-8: false, $transition-9: false, $transition-10: false) {
    @if $transition-1 == default {
      $transition-1: compact($default-transition-property $default-transition-duration $default-transition-function $default-transition-delay); }
    $transitions: false;
    @if type-of($transition-1) == list and type-of(nth($transition-1, 1)) == list {
      $transitions: join($transition-1, compact($transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10), comma); }
    @else {
      $transitions: compact($transition-1, $transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10); }
    $delays: comma-list();
    $has-delays: false;
    $webkit-value: comma-list();
    $moz-value: comma-list();
    $o-value: comma-list();
    // This block can be made considerably simpler at the point in time that
    // we no longer need to deal with the differences in how delays are treated.
    @each $transition in $transitions {
      // Extract the values from the list
      // (this would be cleaner if nth took a 3rd argument to provide a default value).
      $property: nth($transition, 1);
      $duration: false;
      $timing-function: false;
      $delay: false;
      @if length($transition) > 1 {
        $duration: nth($transition, 2); }
      @if length($transition) > 2 {
        $timing-function: nth($transition, 3); }
      @if length($transition) > 3 {
        $delay: nth($transition, 4);
        $has-delays: true; }
      // If a delay is provided without a timing function
      @if is-time($timing-function) and not $delay {
        $delay: $timing-function;
        $timing-function: false;
        $has-delays: true; }
      // Keep a list of delays in case one is specified
      $delays: append($delays, if($delay, $delay, 0s));
      $webkit-value: append($webkit-value, compact(prefixed-for-transition(-webkit, $property) $duration $timing-function));
      $moz-value: append($moz-value, compact(prefixed-for-transition(-moz, $property) $duration $timing-function $delay));
      $o-value: append($o-value, compact(prefixed-for-transition(-o, $property) $duration $timing-function $delay)); }
    @if $experimental-support-for-webkit {
      -webkit-transition: $webkit-value;
      // old webkit doesn't support the delay parameter in the shorthand so we progressively enhance it.
      @if $has-delays {
        -webkit-transition-delay: $delays; } }
    @if $experimental-support-for-mozilla {
      -moz-transition: $moz-value; }
    @if $experimental-support-for-opera {
      -o-transition: $o-value; }
    transition: $transitions; }