-content_for :modal_title do
  -if f.object.new_record?
    Create a new system or business process
  -else
    Edit system or business process

-if !f.object.new_record?
  -content_for :modal_delete_path, flow_system_path(f.object)

.row-fluid
  .span2{ :class => error_class(f, :slug) }
    =f.label :slug, "Code"
    =f.text_field :slug, :class => 'span12'
    =error_messages_inline(f, :slug)

  .span2.disabled{ :class => error_class(f, :version) }
    =f.label :version
    =f.text_field :version, :class => 'input-supermini'
    =error_messages_inline(f, :version)

  .span3

  .span2{ :class => error_class(f, :is_biz_process) }
    =f.label 'System or Process'
    %select.span12{ :name => 'system[is_biz_process]' }
      %option{ :value => '0', :selected => f.object.is_biz_process || 'selected' } System
      %option{ :value => '1', :selected => f.object.is_biz_process && 'selected' } Biz Process
    =error_messages_inline(f, :is_biz_process)

  .span3{ :class => error_class(f, :type) }
    =f.label 'Type'
    %select.span12{ :name => 'system[type_id]' }
      %option(value='') Select Option
      -Option.options_for(:system_type).each do |o|
        %option{ :value => o.id, :selected => (o.id == f.object.type_id) }=o.title
    =error_messages_inline(f, :type)

.row-fluid
  .span12{ :class => error_class(f, :title) }
    =f.label :title
    =f.text_field :title, :class => 'span12'
    =error_messages_inline(f, :title)

.row-fluid
  .span12
    =f.label :description, "Description"
.row-fluid
  .span12.well{ :class => error_class(f, :description) }
    =f.text_area :description
.row-fluid
  .span12
    =error_messages_inline(f, :description)

-if !f.object.new_record?
  =render :partial => 'shared/object_info', :locals => { :object => f.object, :approved => false }
